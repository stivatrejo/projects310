#!/usr/bin/env python
# coding: utf-8

# # ¬°Hola  !üôãüèª‚Äç‚ôÇÔ∏è
# 
# Te escribe Lisandro Saez, soy revisor de c√≥digo en Tripleten y tengo el agrado de revisar el proyecto que entregaste.
# 
# Para simular la din√°mica de un ambiente de trabajo, si veo alg√∫n error, en primer instancia solo los se√±alar√©, d√°ndote la oportunidad de encontrarlos y corregirlos por tu cuenta. En un trabajo real, el l√≠der de tu equipo har√° una din√°mica similar. En caso de que no puedas resolver la tarea, te dar√© una informaci√≥n m√°s precisa en la pr√≥xima revisi√≥n.
# 
# Encontrar√°s mis comentarios m√°s abajo - **por favor, no los muevas, no los modifiques ni los borres**.
# 
# ¬øC√≥mo lo voy a hacer? Voy a leer detenidamente cada una de las implementaciones que has llevado a cabo para cumplir con lo solicitado. Ver√°s los comentarios de esta forma:
# 
# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class="tocSkip"></a>
# 
# Si todo est√° perfecto.
# </div>
# 
# 
# <div class="alert alert-block alert-warning">
# <b>Comentario del revisor</b> <a class="tocSkip"></a>
# 
# Si tu c√≥digo est√° bien pero se puede mejorar o hay alg√∫n detalle que le hace falta. Se aceptan uno o dos comentarios de este tipo en el borrador, pero si hay m√°s, deber√≠as hacer las correcciones. Es como una tarea de prueba al solicitar un trabajo: muchos peque√±os errores pueden hacer que un candidato sea rechazado.
# </div>
# 
# <div class="alert alert-block alert-danger">
# 
# <b>Comentario del revisor</b> <a class="tocSkip"></a>
# 
# Si de pronto hace falta algo o existe alg√∫n problema con tu c√≥digo o conclusiones.
# </div>
# 
# Puedes responderme de esta forma (no te preocupes, no es obligatorio):
# 
# <div class="alert alert-block alert-info">
# <b>Respuesta del estudiante</b> <a class="tocSkip"></a>
# 
# Hola, muchas gracias por tus comentarios y la revisi√≥n.
# </div>
# 
# ¬°Empecemos!

# 
# 
# Todav√≠a desempe√±√°ndote como miembro del equipo anal√≠tico, en el primer proyecto hemos sentado las bases para la segunda fase. ¬°Hemos llegado! Ahora aplicar√°s t√©cnicas avanzadas para extraer datos significativos, atendiendo a las crecientes necesidades del cliente.

# Como sabes, las empresas recopilan y almacenan datos de una forma particular. Store 1 quiere almacenar toda la informaci√≥n de sus clientes en una tabla.
# 
# 
# | user_id | user_name | user_age | purchase_category | spending_per_category |
# | --- | --- | --- | --- | --- |
# | '32415' | 'mike', 'reed' | 32 | 'electronics', 'sport', 'books' | 894, 213, 173 |
# | '31980' | 'kate', 'morgan' | 24 | 'clothes', 'shoes' | 439, 390 |
# 
# En t√©rminos t√©cnicos, una tabla es simplemente una lista anidada que contiene una sublista para cada usuario o usuaria.
# 
# Store 1 ha creado una tabla de este tipo para sus usuarios. Est√° almacenada en la variable "users". Cada sublista contiene el ID del usuario, nombre y apellido, edad, categor√≠as favoritas y el importe gastado en cada categor√≠a.

# -	**user_id:** el identificador √∫nico para cada usuario.
# -	**user_name:** el nombre de usuario.
# -	**user_age:** la edad del usuario.
# -	**fav_categories:** las categor√≠as de art√≠culos comprados por el usuario, como 'ELECTRONICS', 'SPORT', 'BOOKS', etc.
# -	**total_spendings:** la lista de enteros que indican la cantidad gastada en cada una de sus categor√≠as favoritas.
# 

# In[ ]:


users = [
    ['32415', ' mike_reed ', 32.0, ['ELECTRONICS', 'SPORT', 'BOOKS'], [894, 213, 173]],
    ['31980', 'kate morgan', 24.0, ['CLOTHES', 'BOOKS'], [439, 390]],
    ['32156', ' john doe ', 37.0, ['ELECTRONICS', 'HOME', 'FOOD'], [459, 120, 99]],
    ['32761', 'SAMANTHA SMITH', 29.0, ['CLOTHES', 'ELECTRONICS', 'BEAUTY'], [299, 679, 85]],
    ['32984', 'David White', 41.0, ['BOOKS', 'HOME', 'SPORT'], [234, 329, 243]],
    ['33001', 'emily brown', 26.0, ['BEAUTY', 'HOME', 'FOOD'], [213, 659, 79]],
    ['33767', ' Maria Garcia', 33.0, ['CLOTHES', 'FOOD', 'BEAUTY'], [499, 189, 63]],
    ['33912', 'JOSE MARTINEZ', 22.0, ['SPORT', 'ELECTRONICS', 'HOME'], [259, 549, 109]],
    ['34009', 'lisa wilson ', 35.0, ['HOME', 'BOOKS', 'CLOTHES'], [329, 189, 329]],
    ['34278', 'James Lee', 28.0, ['BEAUTY', 'CLOTHES', 'ELECTRONICS'], [189, 299, 579]],
]


# # Paso 1
# 
# En la √∫ltima tarea de la primera parte de este proyecto escribiste c√≥digo para:
# 
# 1. Eliminar todos los espacios iniciales y finales de los nombres, as√≠ como cualquier guion bajo.
# 2. Convertir todas las edades en n√∫meros enteros.
# 3. Separar todos los nombres y apellidos en una sublista.
# 
# Hag√°moslo ahora una funci√≥n para que podamos usarla para fijar a cualquier cliente. Nombra a tu funci√≥n `clean_user`. Debe recibir una lista con toda la informaci√≥n del cliente (user_info), as√≠ como dos enteros. Uno de ellos se√±ala el √≠ndice del nombre del cliente y el otro es el √≠ndice de la edad del cliente en la lista. Debe devolver la lista limpia despu√©s de aplicar todos los cambios anteriores. Pru√©bala llam√°ndola, pas√°ndole la lista `test_user[]` y luego mu√©strala en pantalla.
# 

# In[3]:


def clean_user (user_info, name_index, age_index):# define tu funci√≥n aqu√≠

    # Paso 1: elimina del nombre espacios iniciales y finales, as√≠ como guiones
    user_name_1 = user_info[name_index].strip().replace('_',' ')

    # Paso 2: convierte la edad en entero
    user_age_1 = int(user_info[age_index])

    # Paso 3: separa el nombre y el apellido en una sublista
    user_name_1 = user_name_1.split()

    # Prepara la lista con la informaci√≥n completa del usuario
    # Reemplaza el nombre y la edad originales con los datos limpios
    user_info[name_index]=user_name_1
    user_info[age_index]=user_age_1
    return user_info

# Prueba la funci√≥n
test_user = ['32415', ' mike_reed ', 32.0, ['ELECTRONICS', 'SPORT', 'BOOKS'], [894, 213, 173]]
name_index = 1
age_index = 2

print(clean_user(test_user, name_index, age_index)) # completa aqu√≠ el llamado de la funci√≥n


# ********Pista********
# 
# Para implementar la funci√≥n `clean_user`, efect√∫a los siguientes pasos:
# 
# 1. **Recortar y reemplazar:** utiliza `strip()` para eliminar espacios iniciales y finales del nombre del usuario y `replace('_', ' ')` para eliminar guiones bajos con espacios.
# 2. **Convertir la edad:** convierte la edad en entero utilizando la funci√≥n `int()`.
# 3. **Separar el nombre:** utiliza el m√©todo `split()` para separar el nombre y el apellido, creando una sublista.
# 
# Aseg√∫rate de modificar la lista `user_info` que aparece actualizando el nombre y la edad con los datos limpios antes de devolver la lista. Prueba tu funci√≥n con un usuario de ejemplo para verificar que funciona correctamente.
# 

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class="tocSkip"></a>
# 
# Gran uso de los m√©todos `split()` y `strip()`!
# </div>

# # Paso 2
# 
# Observa que todas las categor√≠as favoritas est√°n almacenadas en may√∫sculas. Llena una nueva lista llamada `fav_categories_low` con las mismas categor√≠as, pero en min√∫sculas, iterando sobre los valores en la lista `fav_categories`, modific√°ndolos y luego a√±ade los nuevos valores a la lista `fav_categories_low`. Como siempre, muestra el resultado final.
# 

# In[4]:


fav_categories = ['ELECTRONICS', 'SPORT', 'BOOKS']
fav_categories_low = []

for categories in fav_categories:
    categories=categories.lower()
    fav_categories_low.append(categories) # escribe tu c√≥digo aqu√≠

print(fav_categories_low)


# ********Pista********
# 
# Crea un bucle `for` que itere sobre la lista `fav_categories`. Utiliza el m√©todo `lower()` para transformar cada categor√≠a a min√∫sculas. Luego, utiliza el m√©todo `append()` para agregar los valores actualizados a la lista `fav_categories_low`.

# # Paso 3
# 
# Ahora hagamos lo mismo, pero para cada uno de los usuarios de la empresa. Llena una lista nueva llamada `users_categories_low` con los mismos usuarios, pero con sus categor√≠as en min√∫sculas, iterando sobre los valores en la lista `users`, luego itera sobre los valores en `user_categories`, modific√°ndolos, y despu√©s agrega los nuevos valores de usuarios a la lista `users_categories_low`. Como siempre, muestra el resultado final.
# 

# In[5]:


users = [
    ['32415', ' mike_reed ', 32.0, ['ELECTRONICS', 'SPORT', 'BOOKS'], [894, 213, 173]],
    ['31980', 'kate morgan', 24.0, ['CLOTHES', 'BOOKS'], [439, 390]],
    ['32156', ' john doe ', 37.0, ['ELECTRONICS', 'HOME', 'FOOD'], [459, 120, 99]],
    ['32761', 'SAMANTHA SMITH', 29.0, ['CLOTHES', 'ELECTRONICS', 'BEAUTY'], [299, 679, 85]],
    ['32984', 'David White', 41.0, ['BOOKS', 'HOME', 'SPORT'], [234, 329, 243]],
    ['33001', 'emily brown', 26.0, ['BEAUTY', 'HOME', 'FOOD'], [213, 659, 79]],
    ['33767', ' Maria Garcia', 33.0, ['CLOTHES', 'FOOD', 'BEAUTY'], [499, 189, 63]],
    ['33912', 'JOSE MARTINEZ', 22.0, ['SPORT', 'ELECTRONICS', 'HOME'], [259, 549, 109]],
    ['34009', 'lisa wilson ', 35.0, ['HOME', 'BOOKS', 'CLOTHES'], [329, 189, 329]],
    ['34278', 'James Lee', 28.0, ['BEAUTY', 'CLOTHES', 'ELECTRONICS'], [189, 299, 579]],
]

users_categories_low = []
for user in users:
	categories_low = []
	for category in user[3]: # escribe tu c√≥digo aqu√≠
		lowered_category = category.lower()  # escribe tu c√≥digo aqu√≠
		categories_low.append(lowered_category) # escribe tu c√≥digo aqu√≠
	user.pop(3)
	user.insert(3,categories_low)
	users_categories_low.append(user)
# escribe tu c√≥digo aqu√≠
print(users_categories_low)


# ********Pista********
# 
# Crea un bucle `for` que itere sobre la lista `users`. Luego crea otro bucle `for` que itere sobre las categor√≠as de usuarios para acceder al usuario y modificarlo. Utiliza el m√©todo `lower()` para transformar cada categor√≠a a min√∫sculas. Luego, modifica al usuario eliminando la lista de categor√≠as anteriores con `pop()` y con `insert()` inserta la nueva en su lugar. A continuaci√≥n utiliza el m√©todo `append()` para agregar a los usuarios actualizados a la lista `users_categories_low`.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class="tocSkip"></a>
# 
# Excelente uso del loop `for`! Parece algo menor ahora, pero definitivamente los usar√°s bastante en el futuro.</div>

# # Paso 4
# 
# Ahora, completemos el c√≥digo de nuestra funci√≥n `clean_user` para limpiar la categor√≠a:
# 1. A√±ade otro par√°metro con el √≠ndice de categor√≠as.
# 2. Pon todos los nombres en min√∫sculas antes de aplicar "strip" y "replace".
# 
# Despu√©s, crea un bucle y aplica tu funci√≥n a toda la lista de usuarios, agregando tus resultados a la lista `users_clean`. Despu√©s mu√©stralo

# In[6]:


def clean_user(user_info, name_index, age_index, cat_index):

  # Paso 1: pon todo en min√∫sculas y elimina del nombre espacios iniciales y finales, as√≠ como guiones
    user_name_1 = user_info[name_index].lower().strip().replace('_',' ')
  # Paso 2: convierte la edad en entero
    user_age_1 = int(user_info[age_index]) # escribe tu c√≥digo aqu√≠

  # Paso 3: separa el nombre y el apellido en una sublista
    user_name_1 = user_name_1.split()# escribe tu c√≥digo aqu√≠

  # Paso 4: separa el nombre y el apellido en una sublista
    categories_low = []
    for category in user_info[cat_index]:
        category = category.lower()
        categories_low.append(category)# escribe tu c√≥digo aqu√≠

    
    

    user_info[name_index] = user_name_1
    user_info[age_index] = user_age_1
    user_info[cat_index] = categories_low # Prepara la lista con la informaci√≥n completa del usuario
  # Reemplaza el nombre y la edad originales con los datos limpios
  # escribe tu c√≥digo aqu√≠
    print(user_info)

    return user_info


users = [
    ['32415', ' mike_reed ', 32.0, ['ELECTRONICS', 'SPORT', 'BOOKS'], [894, 213, 173]],
    ['31980', 'kate morgan', 24.0, ['CLOTHES', 'BOOKS'], [439, 390]],
    ['32156', ' john doe ', 37.0, ['ELECTRONICS', 'HOME', 'FOOD'], [459, 120, 99]],
    ['32761', 'SAMANTHA SMITH', 29.0, ['CLOTHES', 'ELECTRONICS', 'BEAUTY'], [299, 679, 85]],
    ['32984', 'David White', 41.0, ['BOOKS', 'HOME', 'SPORT'], [234, 329, 243]],
    ['33001', 'emily brown', 26.0, ['BEAUTY', 'HOME', 'FOOD'], [213, 659, 79]],
    ['33767', ' Maria Garcia', 33.0, ['CLOTHES', 'FOOD', 'BEAUTY'], [499, 189, 63]],
    ['33912', 'JOSE MARTINEZ', 22.0, ['SPORT', 'ELECTRONICS', 'HOME'], [259, 549, 109]],
    ['34009', 'lisa wilson ', 35.0, ['HOME', 'BOOKS', 'CLOTHES'], [329, 189, 329]],
    ['34278', 'James Lee', 28.0, ['BEAUTY', 'CLOTHES', 'ELECTRONICS'], [189, 299, 579]],
]

name_index = 1
age_index = 2
cat_index = 3
users_cleaned = []

for user in users: # escribe tu c√≥digo aqu√≠
  user_cleaned = clean_user(user, name_index, age_index, cat_index) # escribe tu c√≥digo aqu√≠
  users_cleaned.append(user_cleaned)# escribe tu c√≥digo aqu√≠

print(users_cleaned)


# ********Pista********
# 
# Efect√∫a los siguientes pasos para implementar la funci√≥n `clean_user`:
# 
# 1. **Copia y adapta:** copia el c√≥digo de tu funci√≥n anterior `clean_user`.
# 
# 2. **Pon el nombre en min√∫sculas:** antes de aplicar `split()` y `replace()`, aplica `lower()` al nombre del cliente.
# 
# 3. **Procesa las categor√≠as:** agrega una secci√≥n nueva para gestionar las categor√≠as. Pon cada categor√≠a de la lista en min√∫sculas y almac√©nalas en una nueva lista.
# 
# 4. **Ejecuta tu c√≥digo:** aseg√∫rate de que la funci√≥n `clean_user` actualice la lista `user_info` con el nombre, edad y categor√≠as limpias. Haz un bucle en la lista `users` y llama a la funci√≥n `clean_user`, pasando el usuario, `name_index`, `age_index` y `cat_index` para especificar los √≠ndices correctos para el nombre, la edad y las categor√≠as, respectivamente.
# 
# 5. Guarda cada nuevo usuario limpio en la lista nueva `users_cleaned`.
# 
# Muestra en pantalla la lista `users_cleaned` para asegurarte de que tu c√≥digo realiza las respectivas transformaciones.
# 

# # Paso 5
# 
# La empresa desea conocer sus ingresos totales y te pide que proporciones este valor.
# Para calcular los ingresos de la empresa, sigue estos pasos:
# 
# 1. Utiliza `for` para iterar sobre la lista `users`.
# 2. Extrae la lista de gastos de cada usuario y suma los valores.
# 3. Actualiza el valor de los ingresos con el total de cada usuario.
# 
# As√≠ obtendr√°s los ingresos totales de la empresa que mostrar√°s en la pantalla al final.
# 

# In[7]:


users = [['32415', ['mike', 'reed'], 32, ['electronics', 'sport', 'books'], [894, 213, 173]],
         ['31980', ['kate', 'morgan'], 24, ['clothes', 'books'], [439, 390]],
         ['32156', ['john', 'doe'], 37, ['electronics', 'home', 'food'], [459, 120, 99]],
         ['32761', ['samantha', 'smith'], 29, ['clothes', 'electronics', 'beauty'], [299, 679, 85]],
         ['32984', ['david', 'white'], 41, ['books', 'home', 'sport'], [234, 329, 243]],
         ['33001', ['emily', 'brown'], 26, ['beauty', 'home', 'food'], [213, 659, 79]],
         ['33767', ['maria', 'garcia'], 33, ['clothes', 'food', 'beauty'], [499, 189, 63]],
         ['33912', ['jose', 'martinez'], 22, ['sport', 'electronics', 'home'], [259, 549, 109]],
         ['34009', ['lisa', 'wilson'], 35, ['home', 'books', 'clothes'], [329, 189, 329]],
         ['34278', ['james', 'lee'], 28, ['beauty', 'clothes', 'electronics'], [189, 299, 579]]]

revenue = 0

for user in users:
	spendings_list = user[4]
	total_spendings = sum(spendings_list)
	revenue += total_spendings# escribe tu c√≥digo aqu√≠

print(revenue)


# ********Pista********
# 
# Para extraer la lista de gastos realizados por un usuario, utiliza la indexaci√≥n y as√≠gnala a la variable `spendings_list`. Luego, utiliza la funci√≥n integrada para calcular la suma de `spending_list`. Por √∫ltimo, actualiza el valor de `revenue` a√±adi√©ndole  `total_spendings` mediante la asignaci√≥n aumentada.

# # Paso 6
# 
# La empresa quiere ofrecer descuentos a sus clientes leales. Los clientes que realizan compras por un importe total mayor a $1500 se consideran leales y recibir√°n un descuento.
# 
# Nuestro objetivo es crear un bucle `while` que compruebe el importe total gastado y se detenga al alcanzarlo. Para simular nuevas compras, la variable `new_purchase` genera un n√∫mero entre 30 y 80 en cada iteraci√≥n del bucle. Esto representa la cantidad de dinero gastada en una nueva compra y es lo que debes agregar al total.
# 
# Una vez que se alcance el importe objetivo y se termine el bucle `while`, se mostrar√° la cantidad final.
# 

# In[8]:


from random import randint

total_amount_spent = 1280
target_amount = 1500

while total_amount_spent < target_amount: # escribe tu c√≥digo aqu√≠
	new_purchase = randint(30, 80) # generamos un n√∫mero aleatorio de 30 a 80
	total_amount_spent += new_purchase # escribe tu c√≥digo aqu√≠

print(total_amount_spent)


# ********Pista********
# 
# En el bucle `while`, debes comparar `total_amount_spent` (importe total gastado) con `target_amount` (importe objetivo). Durante cada iteraci√≥n del bucle, actualiza la variable `total_amount_spent` agreg√°ndole el valor `new_purchase`.

# 
# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class="tocSkip"></a>
# 
# Excelente uso del loop `while`! Parece algo menor ahora, pero definitivamente los usar√°s bastante en el futuro.</div>
# 

# # Paso 7
# 
# Recorre la lista de usuarios que te hemos proporcionado y muestra los nombres de los clientes menores de 30 a√±os.
# 

# In[9]:


users = [['32415', ['mike', 'reed'], 32, ['electronics', 'sport', 'books'], [894, 213, 173]],
         ['31980', ['kate', 'morgan'], 24, ['clothes', 'books'], [439, 390]],
         ['32156', ['john', 'doe'], 37, ['electronics', 'home', 'food'], [459, 120, 99]],
         ['32761', ['samantha', 'smith'], 29, ['clothes', 'electronics', 'beauty'], [299, 679, 85]],
         ['32984', ['david', 'white'], 41, ['books', 'home', 'sport'], [234, 329, 243]],
         ['33001', ['emily', 'brown'], 26, ['beauty', 'home', 'food'], [213, 659, 79]],
         ['33767', ['maria', 'garcia'], 33, ['clothes', 'food', 'beauty'], [499, 189, 63]],
         ['33912', ['jose', 'martinez'], 22, ['sport', 'electronics', 'home'], [259, 549, 109]],
         ['34009', ['lisa', 'wilson'], 35, ['home', 'books', 'clothes'], [329, 189, 329]],
         ['34278', ['james', 'lee'], 28, ['beauty', 'clothes', 'electronics'], [189, 299, 579]]]


for user in users:
    age = 2
    name = user[1][0]
    if user[age] < 30:
        print(name)# escribe tu c√≥digo aqu√≠


# ********Pista********
# 
# Utiliza el bucle for para iterar sobre cada fila de la tabla. Utiliza `if` dentro de un bucle `for` para imprimir el nombre de usuario o usuaria. El campo `age` tiene el √≠ndice 2

# # Paso 8
# 
# Mostremos en pantalla los nombres de los usuarios menores de 30 a√±os que acumulan un gasto total superior a 1000 d√≥lares.
# 

# In[10]:


users = [['32415', ['mike', 'reed'], 32, ['electronics', 'sport', 'books'], [894, 213, 173]],
         ['31980', ['kate', 'morgan'], 24, ['clothes', 'books'], [439, 390]],
         ['32156', ['john', 'doe'], 37, ['electronics', 'home', 'food'], [459, 120, 99]],
         ['32761', ['samantha', 'smith'], 29, ['clothes', 'electronics', 'beauty'], [299, 679, 85]],
         ['32984', ['david', 'white'], 41, ['books', 'home', 'sport'], [234, 329, 243]],
         ['33001', ['emily', 'brown'], 26, ['beauty', 'home', 'food'], [213, 659, 79]],
         ['33767', ['maria', 'garcia'], 33, ['clothes', 'food', 'beauty'], [499, 189, 63]],
         ['33912', ['jose', 'martinez'], 22, ['sport', 'electronics', 'home'], [259, 549, 109]],
         ['34009', ['lisa', 'wilson'], 35, ['home', 'books', 'clothes'], [329, 189, 329]],
         ['34278', ['james', 'lee'], 28, ['beauty', 'clothes', 'electronics'], [189, 299, 579]]]

for user in users:
    age = 2
    name = user[1][0]
    total_expense = sum(user[4])
    if user[age] < 30 and total_expense > 1000:
        print(name)# escribe tu c√≥digo aqu√≠


# ********Pista********
# 
# Utiliza el bucle for para iterar sobre cada fila de la tabla. Utiliza `if` dentro de un bucle `for` para imprimir el nombre de usuario o usuaria. El campo `age` tiene el √≠ndice 2. Utiliza la funci√≥n `sum` para sumar los gastos y luego comprueba si es mayor de 1000 d√≥lares.

# # Paso 9
# 
# Ahora vamos a mostrar el nombre y la edad de todos los usuarios y todas las usuarias que han comprado ropa ("clothes"). Imprime el nombre y la edad en la misma declaraci√≥n print.
# 

# In[11]:


users = [['32415', ['mike', 'reed'], 32, ['electronics', 'sport', 'books'], [894, 213, 173]],
         ['31980', ['kate', 'morgan'], 24, ['clothes', 'books'], [439, 390]],
         ['32156', ['john', 'doe'], 37, ['electronics', 'home', 'food'], [459, 120, 99]],
         ['32761', ['samantha', 'smith'], 29, ['clothes', 'electronics', 'beauty'], [299, 679, 85]],
         ['32984', ['david', 'white'], 41, ['books', 'home', 'sport'], [234, 329, 243]],
         ['33001', ['emily', 'brown'], 26, ['beauty', 'home', 'food'], [213, 659, 79]],
         ['33767', ['maria', 'garcia'], 33, ['clothes', 'food', 'beauty'], [499, 189, 63]],
         ['33912', ['jose', 'martinez'], 22, ['sport', 'electronics', 'home'], [259, 549, 109]],
         ['34009', ['lisa', 'wilson'], 35, ['home', 'books', 'clothes'], [329, 189, 329]],
         ['34278', ['james', 'lee'], 28, ['beauty', 'clothes', 'electronics'], [189, 299, 579]]]

for user in users:
    first_name = user[1][0]
    age = user[2]
    category = user[3]
    if 'clothes' in category:
        print(first_name, age)# escribe tu c√≥digo aqu√≠


# ********Pista********
# 
# Utiliza el bucle for para iterar sobre cada fila de la tabla. A continuaci√≥n, utiliza otro bucle para comprobar si este usuario ha comprado ropa ("clothes") y, en caso afirmativo, muestra el nombre y la edad dentro de la misma declaraci√≥n print, separ√°ndolos por comas: `print(firstname, age)`.

# # Paso 10
# 
# La direcci√≥n requiere de una funci√≥n que proporcione informaci√≥n sobre los clientes, incluyendo sus nombres, edades y gasto total, filtrada por categor√≠as espec√≠ficas. Con base en fragmentos de c√≥digo anteriores, crearemos una funci√≥n llamada `get_client_by_cat` con las siguientes especificaciones:
# 
# 1. **Par√°metros:**
#    - **users:** una lista con los datos de los usuarios.
#    - **id_index:** el √≠ndice donde est√° almacenado el ID del cliente en la lista de usuarios.
#    - **name_index:** el √≠ndice donde est√° almacenado el nombre del cliente en la lista de usuarios.
#    - **age_index:** el √≠ndice donde la edad del cliente est√° almacenada en la lista de usuarios.
#    - **category_index:** el √≠ndice donde las categor√≠as de compras del cliente est√°n listadas.
#    - **amounts_index:** el √≠ndice donde las cantidades gastadas en cada categor√≠a est√°n almacenadas.
#    - **filter_category:** un string que representa el nombre de la categor√≠a para filtrar clientes.
# 
# 2. **Salida:**
#    - La funci√≥n devuelve una lista de sublistas. Cada sublista contiene:
#      - El n√∫mero ID del cliente.
#      - Una sublista con el nombre y apellido del cliente.
#      - La edad del cliente.
#      - Un entero que representa la cantidad total gastada por el cliente.
# 
# Por ejemplo, si llamas a la funci√≥n con los siguientes par√°metros:
# 
# 
# ```python
# get_client_by_cat([
#     ['32415', ['mike', 'reed'], 32, ['electronics', 'sport', 'books'], [894, 213, 173]]
# ], 0, 1, 2, 3, 4, 'books')
# ```
# 
# La salida ser√°:
# 
# ```python
# [['32415', ['mike', 'reed'], 32, 1280]]
# ```
# 
# Esta salida muestra que el cliente con el ID '32415', llamado Mike Reed, de 32 a√±os, gast√≥ un total de 1280 en la categor√≠a 'books' y otras compras.
# 
# Despu√©s de hacer tu funci√≥n, ll√°mala pas√°ndole nuestra lista de usuarios, los √≠ndices adecuados y la categor√≠a 'home' y muestra en pantalla la lista que resulta.
# 
# 

# In[12]:


def get_client_by_cat(users, id_index, name_index, age_index, category_index, amounts_index, filter_category):# escribe tu c√≥digo aqu√≠
    
    result = []
    for user in users: # escribe tu c√≥digo aqu√≠
        if filter_category in user[category_index]:
            total_expense = sum(user[amounts_index])

            client_info = [
                user[id_index],
                user[name_index],
                user[age_index],
                total_expense
            ]
            result.append(client_info)

    return result
            

            
          
# La lista de usuarios
users = [
    ['32415', ['mike', 'reed'], 32, ['electronics', 'sport', 'books'], [894, 213, 173]],
    ['31980', ['kate', 'morgan'], 24, ['clothes', 'books'], [439, 390]],
    ['32156', ['john', 'doe'], 37, ['electronics', 'home', 'food'], [459, 120, 99]],
    ['32761', ['samantha', 'smith'], 29, ['clothes', 'electronics', 'beauty'], [299, 679, 85]],
    ['32984', ['david', 'white'], 41, ['books', 'home', 'sport'], [234, 329, 243]],
    ['33001', ['emily', 'brown'], 26, ['beauty', 'home', 'food'], [213, 659, 79]],
    ['33767', ['maria', 'garcia'], 33, ['clothes', 'food', 'beauty'], [499, 189, 63]],
    ['33912', ['jose', 'martinez'], 22, ['sport', 'electronics', 'home'], [259, 549, 109]],
    ['34009', ['lisa', 'wilson'], 35, ['home', 'books', 'clothes'], [329, 189, 329]],
    ['34278', ['james', 'lee'], 28, ['beauty', 'clothes', 'electronics'], [189, 299, 579]]
]

# Llama a la funci√≥n con la categor√≠a 'home'
result = get_client_by_cat(users, 0, 1, 2, 3, 4, 'home')# escribe tu c√≥digo aqu√≠

# Muestra en pantalla la lista que resulta
print(result)


# ********Pista********
# 
# Utiliza un bucle for para iterar sobre cada usuario en la lista. Para cada usuario, verifica que la categor√≠a deseada ("filter_category") est√© en su lista de categor√≠as de compras. Si se encuentra la categor√≠a, calcula la cantidad total gastada sumando las cantidades en la lista correspondiente. Despu√©s, crea una sublista con el ID, nombre (como una lista de nombres y apellidos), edad y cantidad total gastada del usuario. A√±ade esta sublista a la lista final que resulta.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class="tocSkip"></a>
# 
# Te felicito por el excelente trabajo que has hecho con las funciones!</div>
