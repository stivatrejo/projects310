#!/usr/bin/env python
# coding: utf-8

# # ¬°Hola  !üôãüèª‚Äç‚ôÇÔ∏è
# 
# Te escribe Lisandro Saez, soy revisor de c√≥digo en Tripleten y tengo el agrado de revisar el proyecto que entregaste.
# 
# Para simular la din√°mica de un ambiente de trabajo, si veo alg√∫n error, en primer instancia solo los se√±alar√©, d√°ndote la oportunidad de encontrarlos y corregirlos por tu cuenta. En un trabajo real, el l√≠der de tu equipo har√° una din√°mica similar. En caso de que no puedas resolver la tarea, te dar√© una informaci√≥n m√°s precisa en la pr√≥xima revisi√≥n.
# 
# Encontrar√°s mis comentarios m√°s abajo - **por favor, no los muevas, no los modifiques ni los borres**.
# 
# ¬øC√≥mo lo voy a hacer? Voy a leer detenidamente cada una de las implementaciones que has llevado a cabo para cumplir con lo solicitado. Ver√°s los comentarios de esta forma:
# 
# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class="tocSkip"></a>
# 
# Si todo est√° perfecto.
# </div>
# 
# 
# <div class="alert alert-block alert-warning">
# <b>Comentario del revisor</b> <a class="tocSkip"></a>
# 
# Si tu c√≥digo est√° bien pero se puede mejorar o hay alg√∫n detalle que le hace falta. Se aceptan uno o dos comentarios de este tipo en el borrador, pero si hay m√°s, deber√≠as hacer las correcciones. Es como una tarea de prueba al solicitar un trabajo: muchos peque√±os errores pueden hacer que un candidato sea rechazado.
# </div>
# 
# <div class="alert alert-block alert-danger">
# 
# <b>Comentario del revisor</b> <a class="tocSkip"></a>
# 
# Si de pronto hace falta algo o existe alg√∫n problema con tu c√≥digo o conclusiones.
# </div>
# 
# Puedes responderme de esta forma (no te preocupes, no es obligatorio):
# 
# <div class="alert alert-block alert-info">
# <b>Respuesta del estudiante</b> <a class="tocSkip"></a>
# 
# Hola, muchas gracias por tus comentarios y la revisi√≥n.
# </div>
# 
# ¬°Empecemos!

# # D√©jame escuchar la m√∫sica

# # Contenido <a id='back'></a>
# 
# * [Introducci√≥n](#intro)
# * [Etapa 1. Descripci√≥n de los datos](#data_review)
#     * [Conclusiones](#data_review_conclusions)
# * [Etapa 2. Preprocesamiento de datos](#data_preprocessing)
#     * [2.1 Estilo del encabezado](#header_style)
#     * [2.2 Valores ausentes](#missing_values)
#     * [2.3 Duplicados](#duplicates)
#     * [2.4 Conclusiones](#data_preprocessing_conclusions)
# * [Etapa 3. Prueba de hip√≥tesis](#hypothesis)
#     * [3.1 Hip√≥tesis 1: actividad de los usuarios y las usuarias en las dos ciudades](#activity)
# * [Conclusiones](#end)

# ## Introducci√≥n <a id='intro'></a>
# Como analista de datos, tu trabajo consiste en analizar datos para extraer informaci√≥n valiosa y tomar decisiones basadas en ellos. Esto implica diferentes etapas, como la descripci√≥n general de los datos, el preprocesamiento y la prueba de hip√≥tesis.
# 
# Siempre que investigamos, necesitamos formular hip√≥tesis que despu√©s podamos probar. A veces aceptamos estas hip√≥tesis; otras veces, las rechazamos. Para tomar las decisiones correctas, una empresa debe ser capaz de entender si est√° haciendo las suposiciones correctas.
# 
# En este proyecto, comparar√°s las preferencias musicales de las ciudades de Springfield y Shelbyville. Estudiar√°s datos reales de transmisi√≥n de m√∫sica online para probar la hip√≥tesis a continuaci√≥n y comparar el comportamiento de los usuarios y las usuarias de estas dos ciudades.
# 
# ### Objetivo:
# Prueba la hip√≥tesis:
# 1. La actividad de los usuarios y las usuarias difiere seg√∫n el d√≠a de la semana y dependiendo de la ciudad.
# 
# 
# ### Etapas
# Los datos del comportamiento del usuario se almacenan en el archivo `/datasets/music_project_en.csv`. No hay ninguna informaci√≥n sobre la calidad de los datos, as√≠ que necesitar√°s examinarlos antes de probar la hip√≥tesis.
# 
# Primero, evaluar√°s la calidad de los datos y ver√°s si los problemas son significativos. Entonces, durante el preprocesamiento de datos, tomar√°s en cuenta los problemas m√°s cr√≠ticos.
# 
# Tu proyecto consistir√° en tres etapas:
#  1. Descripci√≥n de los datos.
#  2. Preprocesamiento de datos.
#  3. Prueba de hip√≥tesis.
# 
# 
# 
# 
# 
# 
# 

# [Volver a Contenidos](#back)

# ## Etapa 1. Descripci√≥n de los datos <a id='data_review'></a>
# 
# Abre los datos y exam√≠nalos.

# Necesitar√°s `pandas`, as√≠ que imp√≥rtalo.

# In[2]:


import pandas as pd # Importar pandas


# Lee el archivo `music_project_en.csv` de la carpeta `/datasets/` y gu√°rdalo en la variable `df`:

# In[3]:


df = pd.read_csv('/datasets/music_project_en.csv')# Leer el archivo y almacenarlo en df


# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class="tocSkip"></a>
# 
# Bien hecho! Siempre es importante que pasemos el set de datos que estamos usando a `DataFrame`!</div>
# 

# Muestra las 10 primeras filas de la tabla:

# In[8]:


print(df.head(10))# Obtener las 10 primeras filas de la tabla df


# Obt√©n la informaci√≥n general sobre la tabla con un comando. Conoces el m√©todo que muestra la informaci√≥n general que necesitamos.

# In[9]:


df.info()# Obtener la informaci√≥n general sobre nuestros datos


# Estas son nuestras observaciones sobre la tabla. Contiene siete columnas. Almacenan los mismos tipos de datos: `object`.
# 
# Seg√∫n la documentaci√≥n:
# - `' userID'`: identificador del usuario o la usuaria;
# - `'Track'`: t√≠tulo de la canci√≥n;
# - `'artist'`: nombre del artista;
# - `'genre'`: g√©nero de la pista;
# - `'City'`: ciudad del usuario o la usuaria;
# - `'time'`: la hora exacta en la que se reprodujo la canci√≥n;
# - `'Day'`: d√≠a de la semana.
# 
# Podemos ver tres problemas con el estilo en los encabezados de la tabla:
# 1. Algunos encabezados est√°n en may√∫sculas, otros en min√∫sculas.
# 2. Hay espacios en algunos encabezados.
# 3. `Detecta el tercer problema por tu cuenta y descr√≠belo aqu√≠`.
# No utilizan el metodo snake_case, se puede ver en la cloumna userID, con dicho metodo seria user_id.
# 
# 

# ### Escribe observaciones de tu parte. Estas son algunas de las preguntas que pueden ser √∫tiles: <a id='data_review_conclusions'></a>
# 
# `1.   ¬øQu√© tipo de datos tenemos a nuestra disposici√≥n en las filas? ¬øY c√≥mo podemos entender lo que almacenan las columnas?`
# Los datos almacenados en las filas son toods tipo object. Viendo las primeras 10 filas, se puede apreciar que todos son tipo string, aunque haya columnas con n√∫meros como userID, estas son alfan√∫mericas, as√≠ como la columna de time, que tiene el formato HH:MM:SS. Lo que almacena cada columna, ya est√° descrito en las observaciones del paso anterior.
# `2.   ¬øHay suficientes datos para proporcionar respuestas a nuestra hip√≥tesis o necesitamos m√°s informaci√≥n?`
# S√≠, hay suficientes datos para dar respuesta a la hipotesis, pues las columnas de genre, artist y track, nos dan informaci{on sobre el tipo de musica que se escucha, y las columnas de city y Day, nos proporcionan la informacion necesari para analizar si el compprtamiento cambia en cuanto a ciudad y d√≠a. 
# `3.   ¬øNotaste alg√∫n problema en los datos, como valores ausentes, duplicados o tipos de datos incorrectos?`
# S√≠, el DataFrame contiene valores ausentes, los que imposibilitan funciones importantes como count(), tambi√©n duplicados tanto expl√≠citos como impl√≠citos, lo que generar√≠a un mal c√°lculo al momento de comprobar la hip√≥tesis. Por lo que la limpieza de datos es crucial para un buen an√°lisis de los mismos.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class="tocSkip"></a>
# 
# Gran trabajo! Es importante que antes de encarar cualquier problema que queramos resolver con Python, nos paremos a pensar bien en qu√© consisten los datos con los que vamos a trabajar!
# </div>

# [Volver a Contenidos](#back)

# ## Etapa 2. Preprocesamiento de datos <a id='data_preprocessing'></a>
# 
# El objetivo aqu√≠ es preparar los datos para que sean analizados.
# El primer paso es resolver cualquier problema con los encabezados. Luego podemos avanzar a los valores ausentes y duplicados. Empecemos.
# 
# Corrige el formato en los encabezados de la tabla.
# 

# ### Estilo del encabezado <a id='header_style'></a>
# Muestra los encabezados de la tabla (los nombres de las columnas):

# In[5]:


print(df.columns)# Muestra los nombres de las columnas


# Cambia los encabezados de la tabla de acuerdo con las reglas del buen estilo:
# * Todos los caracteres deben ser min√∫sculas.
# * Elimina los espacios.
# * Si el nombre tiene varias palabras, utiliza snake_case.

# Anteriormente, aprendiste acerca de la forma autom√°tica de cambiar el nombre de las columnas. Vamos a aplicarla ahora. Utiliza el bucle for para iterar sobre los nombres de las columnas y poner todos los caracteres en min√∫sculas. Cuando hayas terminado, vuelve a mostrar los encabezados de la tabla:

# In[11]:


df.columns = [col.lower() for col in df.columns]
print(df.columns) # Bucle en los encabezados poniendo todo en min√∫sculas


# Ahora, utilizando el mismo m√©todo, elimina los espacios al principio y al final de los nombres de las columnas e imprime los nombres de las columnas nuevamente:

# In[12]:


df.columns = [col.strip() for col in df.columns]
print(df.columns)# Bucle en los encabezados eliminando los espacios


# Necesitamos aplicar la regla de snake_case a la columna `userid`. Debe ser `user_id`. Cambia el nombre de esta columna y muestra los nombres de todas las columnas cuando hayas terminado.

# In[13]:


df.columns = [col.replace('userid','user_id') for col in df.columns]
print(df.columns)# Cambiar el nombre de la columna "userid"


# Comprueba el resultado. Muestra los encabezados una vez m√°s:

# In[14]:


print(df.columns)# Comprobar el resultado: la lista de encabezados


# 
# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class="tocSkip"></a>
#     
# Te felicito, los encabezados se ven geniales!
# </div>

# [Volver a Contenidos](#back)

# ### Valores ausentes <a id='missing_values'></a>
#  Primero, encuentra el n√∫mero de valores ausentes en la tabla. Debes utilizar dos m√©todos en una secuencia para obtener el n√∫mero de valores ausentes.

# In[17]:


print(df.isna().sum())# Calcular el n√∫mero de valores ausentes


# No todos los valores ausentes afectan a la investigaci√≥n. Por ejemplo, los valores ausentes en `track` y `artist` no son cruciales. Simplemente puedes reemplazarlos con valores predeterminados como el string `'unknown'` (desconocido).
# 
# Pero los valores ausentes en `'genre'` pueden afectar la comparaci√≥n entre las preferencias musicales de Springfield y Shelbyville. En la vida real, ser√≠a √∫til saber las razones por las cuales hay datos ausentes e intentar recuperarlos. Pero no tenemos esa oportunidad en este proyecto. As√≠ que tendr√°s que:
# * rellenar estos valores ausentes con un valor predeterminado;
# * evaluar cu√°nto podr√≠an afectar los valores ausentes a tus c√≥mputos;

# Reemplazar los valores ausentes en las columnas `'track'`, `'artist'` y `'genre'` con el string `'unknown'`. Como mostramos anteriormente en las lecciones, la mejor forma de hacerlo es crear una lista que almacene los nombres de las columnas donde se necesita el reemplazo. Luego, utiliza esta lista e itera sobre las columnas donde se necesita el reemplazo haciendo el propio reemplazo.

# In[19]:


cols_missing_values = ['track','artist','genre']
for col in cols_missing_values:
    df[col].fillna('unknown', inplace=True)
# Bucle en los encabezados reemplazando los valores ausentes con 'unknown'


# Ahora comprueba el resultado para asegurarte de que despu√©s del reemplazo no haya valores ausentes en el conjunto de datos. Para hacer esto, cuenta los valores ausentes nuevamente.

# In[20]:


print(df.isna().sum())# Contar valores ausentes


# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class="tocSkip"></a>
# 
# Te felicito por haber eliminado los NaNs! Es una parte fundamental del an√°lisis de datos!
# </div>
# 

# [Volver a Contenidos](#back)

# ### Duplicados <a id='duplicates'></a>
# Encuentra el n√∫mero de duplicados expl√≠citos en la tabla. Una vez m√°s, debes aplicar dos m√©todos en una secuencia para obtener la cantidad de duplicados expl√≠citos.

# In[21]:


print(df.duplicated().sum())# Contar duplicados expl√≠citos


# Ahora, elimina todos los duplicados. Para ello, llama al m√©todo que hace exactamente esto.

# In[22]:


df = df.drop_duplicates()# Eliminar duplicados expl√≠citos


# Comprobemos ahora si eliminamos con √©xito todos los duplicados. Cuenta los duplicados expl√≠citos una vez m√°s para asegurarte de haberlos eliminado todos:

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class="tocSkip"></a>
# 
# Te felicito por haber eliminado los duplicados! Es una parte fundamental del an√°lisis de datos!
# </div>
# 

# In[23]:


print(df.duplicated().sum())# Comprobar de nuevo si hay duplicados



# Ahora queremos deshacernos de los duplicados impl√≠citos en la columna `genre`. Por ejemplo, el nombre de un g√©nero se puede escribir de varias formas. Dichos errores tambi√©n pueden afectar al resultado.

# Para hacerlo, primero mostremos una lista de nombres de g√©nero √∫nicos, ordenados en orden alfab√©tico. Para ello:
# * Extrae la columna `genre` del DataFrame.
# * Llama al m√©todo que devolver√° todos los valores √∫nicos en la columna extra√≠da.
# 

# In[26]:


unique_genre = sorted(df['genre'].unique())

print(unique_genre)


# Busca en la lista para encontrar duplicados impl√≠citos del g√©nero `hiphop`. Estos pueden ser nombres escritos incorrectamente o nombres alternativos para el mismo g√©nero.
# 
# Ver√°s los siguientes duplicados impl√≠citos:
# * `hip`
# * `hop`
# * `hip-hop`
# 
# Para deshacerte de ellos, crea una funci√≥n llamada `replace_wrong_genres()` con dos par√°metros:
# * `wrong_genres=`: esta es una lista que contiene todos los valores que necesitas reemplazar.
# * `correct_genre=`: este es un string que vas a utilizar como reemplazo.
# 
# Como resultado, la funci√≥n deber√≠a corregir los nombres en la columna `'genre'` de la tabla `df`, es decir, remplazar cada valor de la lista `wrong_genres` por el valor en `correct_genre`.
# 
# Dentro del cuerpo de la funci√≥n, utiliza un bucle `'for'` para iterar sobre la lista de g√©neros incorrectos, extrae la columna `'genre'` y aplica el m√©todo `replace` para hacer correcciones.

# In[32]:


def replace_wrong_genres(df, wrong_genres, correct_genre):

    for genre in wrong_genres:
        df['genre'] = df['genre'].replace(genre, correct_genre)
    return df# Funci√≥n para reemplazar duplicados impl√≠citos


# Ahora, llama a `replace_wrong_genres()` y p√°sale tales argumentos para que retire los duplicados impl√≠citos (`hip`, `hop` y `hip-hop`) y los reemplace por `hiphop`:

# In[33]:


wrong_genres = ['hip', 'hop', 'hip-hop']
correct_genre = 'hiphop'

df = replace_wrong_genres(df, wrong_genres, correct_genre)# Eliminar duplicados impl√≠citos


# Aseg√∫rate de que los nombres duplicados han sido eliminados. Muestra la lista de valores √∫nicos de la columna `'genre'` una vez m√°s:

# In[34]:


print(sorted(df['genre'].unique()))# Comprobaci√≥n de duplicados impl√≠citos


# [Volver a Contenidos](#back)

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class="tocSkip"></a>
# 
# Te felicito por haber eliminado los duplicados impl√≠citos!
# </div>
# 

# ### Tus observaciones <a id='data_preprocessing_conclusions'></a>
# 
# `Describe brevemente lo que has notado al analizar duplicados, c√≥mo abordaste sus eliminaciones y qu√© resultados obtuviste.`
# Los duplicados expl√≠citos es bastante sencillo de identificar, al buscar los duplicados impl√≠citos, se vuelve un poco m√°s dif√≠cil, pues se debe prestar atenci√≥n a la lectura y buena interpretaci{on de los valores, pues se debe estar seguro de que se trate de lo mismo. En el caso de hiphop, fue sencillo deducir que los g√©neros mal escritos, se trata del mismo, pero s√≠ hay valores un poco m√°s complicado de ineterpretar, pues aunque el ejercicio no lo requer√≠a, hay dos g√©neros que pueden ser lo mismo, pero tal vez no, que es el latin y latino, probablemente sea el mismo, pero tal vez latin sea alg√∫n g√©nero de m√∫sica en latin, mejor no meterse con eso. Al eliminar los duplicados, los valores cambiaron de 65079 a 61253, esa diferencia de 3826 valores, ayuda a que el an√°lisis sea m√°s concreto y verdadero.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class="tocSkip"></a>
# 
# Te felicito por la precisi√≥n que muestras a la hora de realizar las observaciones!</div>
# 
# 

# [Volver a Contenidos](#back)

# ## Etapa 3. Prueba de hip√≥tesis <a id='hypothesis'></a>

# ### Hip√≥tesis: comparar el comportamiento del usuario o la usuaria en las dos ciudades <a id='activity'></a>

# La hip√≥tesis afirma que existen diferencias en la forma en que los usuarios y las usuarias de Springfield y Shelbyville consumen m√∫sica. Para comprobar esto, usa los datos de tres d√≠as de la semana: lunes, mi√©rcoles y viernes.
# 
# * Agrupa a los usuarios y las usuarias por ciudad.
# * Compara el n√∫mero de canciones que cada grupo reprodujo el lunes, el mi√©rcoles y el viernes.
# 

# Realiza cada c√°lculo por separado.
# 
# El primer paso es evaluar la actividad del usuario en cada ciudad. Recuerda las etapas dividir-aplicar-combinar de las que hablamos anteriormente en la lecci√≥n. Tu objetivo ahora es agrupar los datos por ciudad, aplicar el m√©todo apropiado para contar durante la etapa de aplicaci√≥n y luego encontrar la cantidad de canciones reproducidas en cada grupo especificando la columna para obtener el recuento.
# 
# A continuaci√≥n se muestra un ejemplo de c√≥mo deber√≠a verse el resultado final:
# `df.groupby(by='....')['column'].method()`Realiza cada c√°lculo por separado.
# 
# Para evaluar la actividad de los usuarios y las usuarias en cada ciudad, agrupa los datos por ciudad y encuentra la cantidad de canciones reproducidas en cada grupo.
# 
# 

# In[35]:


city_count = df.groupby(by='city')['track'].count()
print(city_count)# Contar las canciones reproducidas en cada ciudad


# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class="tocSkip"></a>
# 
# Gran trabajo utilizando `groupby()` para agrupar valores por ciudad!</div>
# 

# `Comenta tus observaciones aqu√≠`
# Al agrupar las canciones reproducidas por ciudad, podemos ver f√°cilmente como es que en Springfield se escucha mucha m√°s m√∫sica. Esto comprueba la mitad de nuestra hip√≥tesis, de que el comportamiente difiere de una ciudad a otra.

# Ahora agrupemos los datos por d√≠a de la semana y encontremos el n√∫mero de canciones reproducidas el lunes, mi√©rcoles y viernes. Utiliza el mismo m√©todo que antes, pero ahora necesitamos una agrupaci√≥n diferente.
# 

# In[36]:


day_count = df.groupby(by='day')['track'].count()
print(day_count)# Calcular las canciones reproducidas en cada uno de los tres d√≠as


# `Comenta tus observaciones aqu√≠`
# Al analizar los datos por d√≠a, podemos percatranos de que el comportamiento efectivamente var√≠a. Lo que me pone a pensar en los factores que lo originen, por ejemplo, pienso que el viernes (el d√≠a que m√°s reproducciones hay), se deba a que la gente sale y/o hace fiestas, lo que contribuya a una mayor reproducci√≥n de canciones.

# Ya sabes c√≥mo contar entradas agrup√°ndolas por ciudad o d√≠a. Ahora necesitas escribir una funci√≥n que pueda contar entradas seg√∫n ambos criterios simult√°neamente.
# 
# Crea la funci√≥n `number_tracks()` para calcular el n√∫mero de canciones reproducidas en un determinado d√≠a **y** ciudad. La funci√≥n debe aceptar dos par√°metros:
# 
# - `day`: un d√≠a de la semana para filtrar. Por ejemplo, `'Monday'` (lunes).
# - `city`: una ciudad para filtrar. Por ejemplo, `'Springfield'`.
# 
# Dentro de la funci√≥n, aplicar√°s un filtrado consecutivo con indexaci√≥n l√≥gica.
# 
# Primero filtra los datos por d√≠a y luego filtra la tabla resultante por ciudad.
# 
# Despu√©s de filtrar los datos por dos criterios, cuenta el n√∫mero de valores de la columna 'user_id' en la tabla resultante. Este recuento representa el n√∫mero de entradas que est√°s buscando. Guarda el resultado en una nueva variable y devu√©lvelo desde la funci√≥n.

# In[38]:


def number_tracks(day,city):# Declara la funci√≥n number_tracks() con dos par√°metros: day= y city=.

    filtered_day =df[df['day'] == day]# Almacena las filas del DataFrame donde el valor en la columna 'day' es igual al par√°metro day=

    filtered_city = filtered_day[filtered_day['city'] == city]# Filtra las filas donde el valor en la columna 'city' es igual al par√°metro city=

    number_tracks = filtered_city['user_id'].count()# Extrae la columna 'user_id' de la tabla filtrada y aplica el m√©todo count()

    return number_tracks# Devolve el n√∫mero de valores de la columna 'user_id'


# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class="tocSkip"></a>
# 
# Te felicito por el excelente trabajo que has hecho con las funciones!</div>
# 
# 
# 
# 

# Llama a `number_tracks()` seis veces, cambiando los valores de los par√°metros para que recuperes los datos de ambas ciudades para cada uno de los tres d√≠as.

# In[45]:


day= 'Monday'
city = 'Springfield'
springfield_monday = number_tracks(day, city)
print(f'El n√∫mero de canciones reproducidas en {city} el lunes: {springfield_monday}') # El n√∫mero de canciones reproducidas en Springfield el lunes


# In[42]:


day= 'Monday'
city = 'Shelbyville'
shelbyville_monday = number_tracks(day, city)
print(f'El n√∫mero de canciones reproducidas en {city} el lunes: {shelbyville_monday}')# El n√∫mero de canciones reproducidas en Shelbyville el lunes


# In[44]:


day= 'Wednesday'
city = 'Springfield'
springfield_wednesday = number_tracks(day, city)
print(f'El n√∫mero de canciones reproducidas en {city} el mi√©rcoles: {springfield_wednesday}')# El n√∫mero de canciones reproducidas en Springfield el mi√©rcoles


# In[43]:


day= 'Wednesday'
city = 'Shelbyville'
shelbyville_wednesday = number_tracks(day, city)
print(f'El n√∫mero de canciones reproducidas en {city} el mi√©rcoles: {shelbyville_wednesday}')# El n√∫mero de canciones reproducidas en Shelbyville el mi√©rcoles


# In[46]:


day= 'Friday'
city = 'Springfield'
springfield_friday = number_tracks(day, city)
print(f'El n√∫mero de canciones reproducidas en {city} el viernes: {springfield_friday}')# El n√∫mero de canciones reproducidas en Springfield el viernes


# In[47]:


day= 'Friday'
city = 'Shelbyville'
shelbyville_friday = number_tracks(day, city)
print(f'El n√∫mero de canciones reproducidas en {city} el viernes: {shelbyville_friday}')# El n√∫mero de canciones reproducidas en Shelbyville el viernes


# **Conclusiones**
# 
# `Comenta si la hip√≥tesis es correcta o se debe rechazar. Explica tu razonamiento.`
# La hip√≥tesis es correcta, pues como podemos apreciar en los datos arrojados por medio de la filtraci√≥n, la actividad difiere en cuanto al d√≠a de la semana y la ciudad, siendo Springfield quien m√°s actividad tiene, pero si nos fijamos bien, la actividad en ambas ciudades fluctua de la misma manera, comenzando el lunes con un n√∫mero grande de reproducciones, pero decreciendo para el mi√©rcoles y llegando a su punto m√°ximo el viernes.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class="tocSkip"></a>
# 
# Grand√≠simo trabajo con el an√°lisis de hip√≥tesis. Felicitaciones!</div>
# 

# [Volver a Contenidos](#back)

# # Conclusiones <a id='end'></a>

# `Resume aqu√≠ tus conclusiones sobre la hip√≥tesis.`
# La hip√≥tesis para comenzar se me hace buena, tiene fundamentos, sin embargo al ir analizando el comportamiento en ambas ciudades, surgen m√°s dudas, como por ejemplo, el tama√±o de poblaci√≥n de ambas ciudades, las edades de los usuarios e incluso los g√©neros. Al tener en cuenta m√°s factores, se vuelve m√°s complicado el procesar los datos, pero se llega a conclusiones sobre el comportamiento m√°s sesgadas, que pueden ayudar a tomar decisiones en cuanto a marketing o analizar problem√°ticas, pero muy buen ejercicio.

# ### Nota
# En proyectos de investigaci√≥n reales, la prueba de hip√≥tesis estad√≠stica es m√°s precisa y cuantitativa. Tambi√©n ten en cuenta que no siempre se pueden sacar conclusiones sobre una ciudad entera a partir de datos de una sola fuente.
# 
# Aprender√°s m√°s sobre la prueba de hip√≥tesis en el sprint de an√°lisis estad√≠stico de datos.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class="tocSkip"></a>
# 
# Felicitaciones por el excelente trabajo que hiciste durante todo el sprint!</div>
# 
# 
# 

# [Volver a Contenidos](#back)
